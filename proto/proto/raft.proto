syntax = "proto3";
package raft;

message LogEntry {
    bytes entry = 1;    
}

// Invoked by leader to replicate log entries.
message AppendEntriesRequest {
    // The election term that the leader node is in.
    uint64 term = 1;
    // The ID of the leader so that follower can redirect clients.
    uint64 leader_id = 2;
    // The index of the log entry immediately preceding new ones.
    uint64 prev_log_index = 3;
    // The term of the prev_log_index.
    uint64 prev_log_term = 4;    
    // The log entries to store.
    repeated LogEntry entries = 5;
    // The leader's commit index.
    uint64 leader_commit_index = 6;
}


// Returned by candidates and followers when a leader requests to AppendEntries.
message AppendEntriesResponse {
    // The current term for leader to update itself.
    uint64 term = 1;
    // True, if a follower contained an entry matching prev_log_index and prev_log_term
    bool success = 2;
}


// Invoked by leader to inform the other servers of its leadership and existence.
message HeartbeatRequest {
    // The election term that the leader node is in.
    uint64 term = 1;
    // The ID of the leader so that follower can redirect clients.
    uint64 leader_id = 2;
    // The index of the log entry immediately preceding new ones.
    uint64 prev_log_index = 3;
    // The term of the prev_log_index.
    uint64 prev_log_term = 4;    
    // The leader's commit index.
    uint64 leader_commit_index = 5;
}

// Returned by candidates and followers when a leader tells them of its presence.
message HeartbeatResponse {
    // The current term for leader to update itself.
    uint64 term = 1;
    // True, if a follower contained an entry matching prev_log_index and prev_log_term
    bool success = 2;
}

// Invoked by candidate to gather votes.
message VoteRequest {
    // The election term that the candidate node is in.
    uint64 term = 1;
    // The ID of the candidate node that is requesting a vote.
    uint64 candidate_id = 2;
    // The index of the candidate's last log entry.
    uint64 last_log_index = 3;
    // The term of the candidate's last log entry.
    uint64 last_log_term = 4;
}

// Returned by followers when a candidate requests for vote.
message VoteResponse {
    // The election term that the follower node is in.
    uint64 term = 1;
    // Whether the follower node granted a vote to this candidate.
    bool vote_granted = 2;
}

// The RPCs involved in Raft.
service Raft {
    // A leader-to-* RPC that requests the other nodes to append entries in their logs.
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {};
    // A leader-to-* RPC that informs the other notes of its leadership and existence.
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {};
    // A candidate-to-follower RPC that requests for a vote to become leader in the latest election term.
    rpc RequestVote(VoteRequest) returns (VoteResponse) {};
}